import asyncio
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.tl.functions.messages import GetDialogFiltersRequest
from telethon.tl.types import MessageEntityCustomEmoji
import time
from telethon.tl.types import DialogFilter

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
api_id = 123 # –≤–∞—à api_id
api_hash = ""  # –≤–∞—à api_hash
string_session = StringSession("")  # –≤—Å—Ç–∞–≤—å—Ç–µ —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞

# --- –†–ê–°–°–´–õ–ö–ê ---
MESSAGE_DELAY_MS = 2000

message_text = """ü§ë@Mvlnt –∏ @blaminsü§ë –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç:

ü§ë–°–∫—É–ø–∞–µ–º –±–∞—á–∏/–±–∞–∫—Å—ã‚úâÔ∏è

üì∑–û—Ç 2$ - 74‚ÇΩ
üñº–û—Ç 5$ - 75‚ÇΩ
üìπ–û—Ç 10$ - 76‚ÇΩ
üß†–û—Ç 50$ - 77‚ÇΩ
üß†–û—Ç 100$ - 78‚ÇΩ

üôÄ–ë—é–¥–∂–µ—Ç –Ω–µ –±–µ—Å–∫–æ–Ω–µ—á–µ–Ω –ø–∏—à–∏—Ç–µ –≤ –õ–°.
üòπ–ò–¥—ë–º –æ–Ω–ª–∏ –≥–∞—Ä–∞–Ω—Ç–æ–≤ —á–∞—Ç–∞.
üòª–°–∫–∞–º - –¥–∞–∂–µ –Ω–µ –ø—Ä–æ–±—É–π—Ç–µ(–Ω–µ —Ç–µ—Ä—è–π—Ç–µ —Å–≤–æ–µ –≤—Ä–µ–º—è)"""

emoji_data = [
    {"placeholder": "ü§ë", "id": 5449535362219132702},
    {"placeholder": "ü§ë", "id": 5350716797622442220},
    {"placeholder": "ü§ë", "id": 5249054346200509700},
    {"placeholder": "‚úâÔ∏è", "id": 5350291836378307462},
    {"placeholder": "üì∑", "id": 5278410301639769147},
    {"placeholder": "üñº", "id": 5280774517927457293},
    {"placeholder": "üìπ", "id": 5278589573574703984},
    {"placeholder": "üß†", "id": 5280803680755398454},
    {"placeholder": "üß†", "id": 5278578595638295143},
    {"placeholder": "üôÄ", "id": 4947487705752667417},
    {"placeholder": "üòπ", "id": 4949885177972131362},
    {"placeholder": "üòª", "id": 4947697806962852817},
]


def create_entities(text, data):
    entities = []
    used_indices = set()
    for emoji in data:
        start = 0
        while True:
            index = text.find(emoji["placeholder"], start)
            if index == -1:
                break
            if index not in used_indices:
                entities.append(MessageEntityCustomEmoji(
                    offset=index,
                    length=len(emoji["placeholder"]),
                    document_id=emoji["id"]
                ))
                used_indices.add(index)
                break
            start = index + 1
    return entities


async def main():
    client = TelegramClient(string_session, api_id, api_hash)

    await client.start()
    print("‚úÖ –ö–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω.")
    print("üîë –í–∞—à–∞ —Å—Ç—Ä–æ–∫–∞ —Å–µ—Å—Å–∏–∏ (—Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ):")
    print(f'"{client.session.save()}"\n')

    filters = await client(GetDialogFiltersRequest())
    custom_folders = [f for f in filters.filters if isinstance(f, DialogFilter)]

    if not custom_folders:
        print("‚ùå –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫.")
        return

    print("\n--- –í–∞—à–∏ –ø–∞–ø–∫–∏ ---")
    for folder in custom_folders:
        print(f'ID: {folder.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: "{folder.title.text}"')
    print("-------------------")

    folder_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –ø–∞–ø–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: "))
    target_folder = next((f for f in custom_folders if f.id == folder_id), None)

    if not target_folder:
        print("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    peers = target_folder.include_peers
    print(f"\nüì® –ù–∞–π–¥–µ–Ω–æ {len(peers)} —á–∞—Ç–æ–≤. –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...\n")

    message_entities = create_entities(message_text, emoji_data)

    for peer in peers:
        try:
            entity = await client.get_entity(peer)
            title = getattr(entity, 'title', None) or getattr(entity, 'username', None) or f"ID {getattr(entity, 'user_id', '–Ω–µ–∏–∑–≤')}"
            await client.send_message(
                entity,
                message=message_text,
                formatting_entities=message_entities
            )
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤: {title}")
        except FloodWaitError as e:
            print(f"‚è≥ FloodWait: –∂–¥–µ–º {e.seconds} —Å–µ–∫...")
            await asyncio.sleep(e.seconds)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        await asyncio.sleep(MESSAGE_DELAY_MS / 1000)

    print("\nüèÅ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    await client.disconnect()


if __name__ == "__main__":
    asyncio.run(main())
